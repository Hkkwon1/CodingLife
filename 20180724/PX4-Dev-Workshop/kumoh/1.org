#+STARTUP: showeverything
#+AUTHOR:    Donghee Park
# Creative Commons, Share-Alike (cc)
#+EMAIL:     dongheepark@gmail.com
#+HTML_HEAD_EXTRA: <style type="text/css">img {  width: auto ;  max-width: 100% ;  height: auto ;} </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>

* 수업
 - 목표: 드론 제어 소프트웨어에 대해 이해할 수 있고, 프로그래밍 환경을 구축할 수 있다.
 - 교재: https://goo.gl/sDfk3j
 - 코치: 박동희 dongheepark@gmail.com

* 드론 제어 소프트웨어 소개 및 설치

1. 워크숍 소개, 참가자 소개

2. PX4 소개, ROS 소개

3. Linux 사용하기

* PX4 소개

https://px4.io/

https://learn.dronemap.io/px4-workbook/px4-intro.html

5. PX4 Firmware Build
  - https://dev.px4.io
  - gazebo 사용하기, QGroundControl 사용하기.

6. PX4 미들웨어 및 앱 구조 소개
 - 디렉토리 구조 소개
 - uORB
 - PX4 shell 사용하기
 - hello-skyworld

* ROS 프로그래밍

** ROS
 - Robot Operating System: 로봇 빌들에 사용되는 라이브러리 어플리케이션 모음 http://www.ros.org/
 - 목표: 로봇을 만들때 기존의 재활용 하고 공유하자.
 - History:
  - 2000s: Standford Artificial intelligence
  - 2007: Willow Garage
  - 2013: Open Source Robotics Foundation
 - 사용 분야: Drone, Kinematic ARMS(로봇암), Wheeled(바퀴), Bi-pedal(이족)

** ROS Nodes and Topics

# https://misohena.jp/article/emacs_org_textfigures/dot.html

#+begin_src dot :file ros_nodes_and_topics1.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR
  graph [fontname="MS Gothic"];
  node [shape=rect, color="#40e0d0"]
  edge [fontname="MS Gothic"];
  label = "Robot Communication Sequence";
  "Perception" -> "Dicesion Making";
  "Dicesion Making" -> "Actuation";
}
#+end_src

**** Perception: Sense
    - Sensor Fusion
    - Filtering
    - Localization

**** Dicesion Making: Decide
    - Path Planning
    - Prediction
    - Behavior Planning

**** Actuation: Act
    - PID Control
    - Model Predictive Control

*** ROS Master Process

노드 관리

#+begin_src dot :file ros_master_process1.png :cmdline -Kdot -Tpng
digraph {
  graph [fontname="MS Gothic"];
  node [shape=box, color="#40e0d0"]
  edge [fontname="MS Gothic"];
  label = "ROS Master Process";

  subgraph cluster_perception {
    node [shape=rect, style="rounded"]
    label = "Perception";
    Camera;
    "Wheel Encoder";
    "Positon Estimator";
  }

  subgraph cluster_dicesion_making {
    node [shape=rect, style="rounded"]
    label = "Dicesion Making";
    "Behavior Execution";
  }

  subgraph cluster_actuation {
    node [shape=rect, style="rounded"]
    label = "Actuation";
    "Motor Control";
  }
}
#+end_src

*** Topics

노드간 통신 인터페이스. 구독 발행의 이름

#+begin_src dot :file ros_topic1.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR
  node [color="#40e0d0"]
  edge [fontname="MS Gothic"];
  node1 [label= ""]
  node2 [label= ""]

  node1 -> node2 [label="/topic_name"];
}

#+end_src

*** Publish and Subscribe

발행과 구독. 신문/잡지 발행 구독에 비유

#+begin_src dot :file ros_publish_and_subscribe1.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR
  node [color="#40e0d0"]
  edge [fontname="MS Gothic"];
  label = "      PUBLISH           SUBSCRIBER";
  node1 [label= ""]
  node2 [label= ""]

  node1 -> node2
  node2 -> node1
}
#+end_src

실제 예제

#+begin_src dot :file ros_publish_and_subscribe2.png :cmdline -Kdot -Tpng
digraph {
  node [color="#40e0d0"]
  edge [fontname="MS Gothic"];

  "Wheel Encoder" -> "Positon Estimator" [label="/wheel_encoder\lrotation"]
  "Behavior Executor" -> "Motor Controller" [label="/motor_controller\lvelocity_cmd"]
  "Camera" -> "Behavior Executor" [label="/camera_images\limage"]
  "Positon Estimator" -> "Behavior Executor" [label="/position_estimate\lpose"]
}
#+end_src

** ROS Message Passing

메시지: 노드간 통신할때 이동하는 실제 데이터
 - 메시지는 텍스트로 구성. 메시지를 이해하기 쉽다.

미리 정의된 메시지 타입 :
 - http://wiki.ros.org/common_msgs
 - https://github.com/ros/common_msgs

** ROS Services

 - Request-Response, 1:1 통신
 - PubSub이 필요 없는 경우 사용, 요청 할때만 데이터가 제공. 네트워크 부하가 적다.

*** 예시: 카메라 이미지 얻기

#+begin_src dot :file ros_services1.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR;
  node [color="#40e0d0"];
  edge [fontname="MS Gothic"];
  label = "Publicate and Subscribe";

  "Camera" -> "Behavior Executor" [label="/camera_images\limage"]
}
#+end_src

#+begin_src dot :file ros_services2.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR;
  node [color="#40e0d0"];
  edge [fontname="MS Gothic", style=dotted];
  label = "Request-Response";


  "Behavior Executor" -> "Camera" [label="/capture_image\lrequest: exposure time"]
  "Camera" -> "Behavior Executor" [label="\nresponse: image"]
}
#+end_src

** ROS Turtlesim

Turtle

#+ATTR_HTML: width="200px"
[[https://i.imgur.com/0r46gFH.png]]

*** Turtlesim 실행하기

[[https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58d9820b_running-turtlesim/running-turtlesim.png]]


1. 환경 변수 설정

#+begin_src sh
$ source /opt/ros/melodic/setup.bash
#+end_src

2. roscore 실행
 - roscore: Master + rosout + parameter server
  - Master: 네임 서비스
  - rosout: stdout/stderr 로깅
  - parameter server: 파라미터 저장 서버

#+begin_src sh
$ roscore
#+end_src

3. turtlesim 패키지의 turtlesim_node 실행
#+begin_src sh
$ rosrun turtlesim turtlesim_node
#+end_src

4. turtlesim 패키지의 turtle_teleop_key 실행
#+begin_src sh
rosrun turtlesim turtle_teleop_key
#+end_src

*** Turtlesim 노드 목록

#+begin_src sh
rosnode list
#+end_src

/rosout : ROS 메시지 로깅.

*** Turtlesim 토픽 목록
#+begin_src sh
rostopic list
#+end_src

*** Turtlesim 토픽 정보

#+begin_src sh
rostopic info /turtle1/cmd_vel

#+end_src

*** Turtlesim 메시지 정보

#+begin_src sh
$ rosmsg info geometry_msg/Twist
geometry_msgs/Vector3 linear
  float64 x
  float64 y
  float64 z
geometry_msgs/Vector3 angular
  float64 x
  float64 y
  float64 z
#+end_src

or

#+begin_src sh
rosed geometry_msgs Twist.msg
#+end_src

*** Turtlesim Echo a Topic

디버깅시 편리

#+begin_src sh
rostopic echo /turtle1/cmd_vel
#+end_src

***  ~rqt_graph~

#+begin_src sh
rqt_graph
#+end_src

[[http://wiki.ros.org/rqt_graph?action=AttachFile&do=get&target=snap_rqt_graph_moveit_demo.png]]


** Gazebo Install

https://goo.gl/fzhFYX

#+begin_src sh
$ sudo apt-get remove '.*gazebo.*' '.*sdformat.*' '.*ignition-math.*' '.*ignition-msgs.*' '.*ignition-transport.*'
$ sudo apt-get install ros-melodic-desktop-full -y
#+end_src

** MavROS 설치 및 실행

https://goo.gl/JcPk1Q

#+begin_src sh

## Create catkin workspace (ROS build system)
mkdir -p ~/catkin_ws/src
cd ~/catkin_ws

## Install dependencies
sudo apt-get install python-wstool python-rosinstall-generator python-catkin-tools -y

## Initialise wstool
wstool init ~/catkin_ws/src

## Build MAVROS
### Get source (upstream - released)
rosinstall_generator --upstream mavros --rosdistro kinetic | tee /tmp/mavros.rosinstall
### Get latest released mavlink package
rosinstall_generator mavlink --rosdistro kinetic | tee -a /tmp/mavros.rosinstall
### Setup workspace & install deps
wstool merge -t src /tmp/mavros.rosinstall
wstool update -t src
rosdep install --from-paths src --ignore-src --rosdistro kinetic -y

catkin build


#+end_src

~mavros_node~ 실행

#+begin_src sh
rosrun mavros mavros_node _fcu_url:="udp://:14540@127.0.0.1:14557" _gcs_url:="udp://@127.0.0.1"
#+end_src

~mavros_node~ 실행 (다른 방법)
#+begin_src sh
# px4.launch 이용하여 mavros node 실행
roslaunch mavros px4.launch fcu_url:="udp://:14540@192.168.1.36:14557" _gcs_url:"udp://@127.0.0.1"
#+end_src

** Gazebo 실행
#+begin_src sh
$ make posix_sitl_default gazebo
#+end_src


* ROS 노드 관리

** ROS 노드 실행 및 관리

**** ROS Core 노드 실행
#+begin_src sh
$ roscore
#+end_src

**** MAVROS 노드 실행
#+begin_src sh
$ roslaunch mavros px4.launch

# roslaunch mavros px4.launch fcu_url:="udp://:14540@192.168.88.53:14557" gcs_url:="udp://@192.168.88.53"
# roslaunch mavros px4.launch fcu_url:="/dev/ttyTHS1:921600" gcs_url:="udp://@192.168.88.53"
#+end_src

# J120 UART2에 PX4 telemetry 2 연결
# roslaunch mavros px4.launch fcu_url:="/dev/ttyTHS1:921600" gcs_url:="udp://@192.168.88.53"

**** 토픽 목록
#+begin_src sh
$ rostopic list
#+end_src

**** 토픽 내용 보기

***** 메시지 타입 보기
#+begin_src sh
$ rostopic info /mavros/state
#+end_src

타입 내부 보기
#+begin_src sh
rostopic type /mavros/state | rosmsg show
#+end_src

***** 메시지 내용
#+begin_src sh
$ rostopic echo /mavros/state
#+end_src

***** 토픽 publish 주기 보기
#+begin_src sh
$ rostopic hz /mavros/state
#+end_src

***** 실행 노드 확인
#+begin_src sh
$ rqt_graph
#+end_src

** ROS 노드 토픽 명령 실행하기. (MAVROS 위주)

http://wiki.ros.org/ROS/Tutorials/UnderstandingTopics

*** Subscribe

#+begin_src sh
rostopic echo [topic]
#+end_src

**** ~STATE~
#+begin_src sh
$ rostopic echo /mavros/state
#+end_src

**** ~LOCAL_POSITION~ 확인

#+begin_src sh
$ rostopic echo /mavros/local_position/pose
#+end_src

*** Services

#+begin_src sh
rosservice call [topic] [msg_type] [args]
#+end_src

**** ~SET_MODE~

#+begin_src sh
# https://github.com/mavlink/mavros/blob/master/mavros_msgs/srv/SetMode.srv
# http://wiki.ros.org/mavros/CustomModes
# Manual Mode
rosservice call /mavros/set_mode "base_mode: 64
custom_mode: ''"

rosservice call /mavros/set_mode "base_mode: 0
custom_mode: 'MANUAL'"

rosservice call /mavros/set_mode "base_mode: 0
custom_mode: 'POSCTL'"

rosservice call /mavros/set_mode "base_mode: 0
custom_mode: 'OFFBOARD'"

rosservice call /mavros/set_mode "base_mode: 0
custom_mode: 'AUTO.LAND'"
#+end_src

**** ~ARMING~
#+begin_src sh
rosservice call /mavros/cmd/arming "value: true"
#+end_src

**** ~TAKEOFF~

#+begin_src sh
rosservice call /mavros/cmd/takeoff "{min_pitch: 0.0, yaw: 0.0, latitude: 47.3977508, longitude: 8.5456074, altitude: 2.5}"
#+end_src

*** Publish

#+begin_src sh
rostopic pub [topic] [msg_type] [args]
#+end_src

**** ~SETPOINT_POSITION~

OFFBOARD 모드에서 동작

#+begin_src sh
rostopic pub -r 10 /mavros/setpoint_position/local geometry_msgs/PoseStamped "header:
  auto
pose:
  position:
    x: 5.0
    y: 0.0
    z: 0.0
  orientation:
    x: 0.0
    y: 0.0
    z: 0.0
    w: 0.0"
#+end_src

**** ~SETPOINT_VELOCITY~

OFFBOARD 모드에서 동작

#+begin_src sh
$ rostopic pub -r 10 /mavros/setpoint_velocity/cmd_vel geometry_msgs/TwistStamped "{header: auto, twist: {linear: {x: 10.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}}"
#+end_src

*** 실습

준비: 순서대로 실행
  - Gazebo 실행: ~cd ~/src/Firmware; make posix_sitl_default gazebo~
  - TX2의 MAVROS를 PC(192.168.88.53)의 Gazebo와 연결 ~roslaunch mavros px4.launch fcu_url:="udp://:14540@192.168.88.53:14557" gcs_url:="udp://@192.168.88.53"~ \\
    또는 PC의 MAVROS를 PC(127.0.0.1)의 Gazebo와 연결 ~rosrun mavros mavros_node _fcu_url:="udp://:14540@127.0.0.1:14557" _gcs_url:="udp://@127.0.0.1"~
  - QGroundControl 실행: PX4 Parameter ~COM_OF_LOSS_T~ 파라미터 10초로 바꾸기. Failsafe timeout을 10초로 바꾸어야 커맨드라인에서 드론을 조정하기 편하다.

\\

해보기: 커맨드 라인에서 다음 명령을 수행하여, QGroundControl에 아래와 같은 자취를 남겨보자.
  - 1. ARM
  - 2. TAKEOFF 하고. (옵션)
  - 3. 현재 위치를 지정한다.  ~/mavros/setpoint_position~ 이용하여, (0,0,0) 위치를 10hz로 지정
  - 3-1. MODE 변환. OFFBOARD
  - 4. 20m 간격으로 정사각형을 따라 움직인다. ~/mavros/setpoint_position~ 이용
  - 5. HOME 자리에 오면 LAND 한다.
  - 6. DISARM

[[https://i.imgur.com/4IjvTca.png]]

더해보기: 드론의 머리방향이 진행 방향을 향하도록 하자.

 - Body 3-2-1 순서 오일러->쿼터니언 변환

#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
\begin{align}
\begin{bmatrix}
x \\
y \\
z \\
w \\
\end{bmatrix}
& =
\begin{bmatrix}
\cos (\phi /2) \cos (\theta /2) \cos (\psi /2) +  \sin (\phi /2) \sin (\theta /2) \sin (\psi /2) \\
\sin (\phi /2) \cos (\theta /2) \cos (\psi /2) -  \cos (\phi /2) \sin (\theta /2) \sin (\psi /2) \\
\cos (\phi /2) \sin (\theta /2) \cos (\psi /2) +  \sin (\phi /2) \cos (\theta /2) \sin (\psi /2) \\
\cos (\phi /2) \cos (\theta /2) \sin (\psi /2) -  \sin (\phi /2) \sin (\theta /2) \cos (\psi /2) \\
\end{bmatrix} \\
\end{align}

변환 코드(python): https://gist.github.com/donghee/e3b4fa8ec789cec0e287bf3b91ddb79e

# https://www.andre-gaschler.com/rotationconverter/

** 참고
 - https://github.com/mavlink/mavros/tree/master/mavros

* ROS 노드 만들기

** 새로운 노드 만들기

*** 패키지 만들기

#+begin_src sh
$ source ~/catkin_ws/devel/setup.bash
$ cd ~/catkin_ws/src
$ catkin_create_pkg drone_state mavros sensor_msgs roscpp
#+end_src

*** 노드 코드 작성

~/home/donghee/catkin_ws/src/drone_state/src/drone_state.cpp~
#+begin_src c++

#include "ros/ros.h"
#include "sensor_msgs/Imu.h"

void imuDataCallback(const sensor_msgs::Imu::ConstPtr& msg){
  ROS_INFO("\nlinear acceleration\
      \nx: [%f]\ny:[%f]\nz:[%f]", msg->linear_acceleration.x,
      msg->linear_acceleration.y, msg->linear_acceleration.z);
}

int main(int argc, char **argv){
  ros::init(argc, argv, "drone_state");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("/mavros/imu/data", 1000, imuDataCallback);
  ros::spin();
  return 0;
}
#+end_src

빌드 스크립트 추가

~~/catkin_ws/src/drone_state/CMakeLists.txt~ 파일 끝에 다음 3줄 추가

#+begin_src cmake
include_directories(include ${catkin_INCLUDE_DIRS})
add_executable(drone_state src/drone_state.cpp)
target_link_libraries(drone_state ${catkin_LIBRARIES})
#+end_src

환경 변수 다시 로드!
#+begin_src sh
$ source ~/catkin_ws/devel/setup.bash
#+end_src

*** 패키지 빌드

#+begin_src sh
$ cd ~/catkin_ws
$ catkin build
#+end_src

*** 패키지 노드 실행

~drone_state~ 패키지의 ~drone_state~ 노드 실행
#+begin_src sh
$ rosrun drone_state drone_state
#+end_src


*** 해보기: /mavros/state 읽어서 1초마다 비행 mode 한번씩 출력
 - ~/mavros/state~ 타입 체크하여 헤더 include

#+BEGIN_SRC c++

#include "ros/ros.h"
#include "mavros_msgs/State.h"

void droneStateCallback(const mavros_msgs::State::ConstPtr& msg){
  ROS_INFO("\nDrone mode: %s", msg->mode.c_str());
}

int main(int argc, char **argv){
  ros::init(argc, argv, "drone_state");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("/mavros/state", 1000, droneStateCallback);
  ros::spin();
  return 0;
}
#+END_SRC

*** 해보기 결과:

#+begin_src c++
$ rosrun drone_state drone_state
[ INFO] [1539297808.077868114]:
Drone mode: OFFBOARD
[ INFO] [1539297808.525173697]:
Drone mode: OFFBOARD
[ INFO] [1539297809.565387356]:
Drone mode: OFFBOARD
#+end_src

~rqt_graph~

[[https://i.imgur.com/CGHQVwc.png]]


** 새로운 노드 만들기: 드론 이륙 착륙

#+begin_src dot :file mavros_takeoff_and_land1.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR
  graph [fontname="NanumSquare"];
  node [shape=rect, color="#40e0d0"]
  edge [style=dashed, fontname="NanumSquare"];
  node1 [label= "/takeoff_and_land"]
  node2 [label= "/mavros"]

  node1 -> node2 [label="1. /mavros/cmd/arming"];
  node1 -> node2 [label="2. /mavros/cmd/takeoff"];
  node1 -> node2 [label="3. /mavros/cmd/land"];
}
#+end_src

~drone_command~ 패키지에 ~takeoff_and_land~ 노드를 만들어 보자.

2.5m 이륙후 10초 있다가 착륙

#+begin_src c++
#include <cstdlib>

#include <ros/ros.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/CommandTOL.h>
#include <mavros_msgs/SetMode.h>

#include <geometry_msgs/PoseStamped.h>

int main(int argc, char **argv)
{

    int rate = 20;

    ros::init(argc, argv, "takeoff_and_land");
    ros::NodeHandle n;

    ros::Rate r(rate);

    ///////////////////ARM//////////////////////
    ros::ServiceClient arming_client = n.serviceClient<mavros_msgs::CommandBool>("/mavros/cmd/arming");
    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    if (arming_client.call(arm_cmd) && arm_cmd.response.success)
    {
        ROS_INFO("Vehicle armed");
    } else {
        ROS_ERROR("Failed arming or disarming");
    }

    /////////////////TAKEOFF////////////////////
    ros::ServiceClient takeoff_client = n.serviceClient<mavros_msgs::CommandTOL>("/mavros/cmd/takeoff");
    mavros_msgs::CommandTOL takeoff_cmd;
    takeoff_cmd.request.altitude = 10;
    takeoff_cmd.request.latitude = 0;
    takeoff_cmd.request.longitude = 0;
    takeoff_cmd.request.min_pitch = 0;
    takeoff_cmd.request.yaw = 0;
    if(takeoff_client.call(takeoff_cmd) && takeoff_cmd.response.success){
        ROS_INFO("Okay Takeoff");
    }else{
        ROS_ERROR("Failed Takeoff");
    }

    /////////////////DO STUFF///////////////////
    sleep(10);


    ///////////////////LAND/////////////////////
    ros::ServiceClient land_client = n.serviceClient<mavros_msgs::CommandTOL>("/mavros/cmd/land");
    mavros_msgs::CommandTOL land_cmd;
    land_cmd.request.altitude = 0;
    land_cmd.request.latitude = 0;
    land_cmd.request.longitude = 0;
    land_cmd.request.min_pitch = 0;
    land_cmd.request.yaw = 0;
    if(land_client.call(land_cmd) && land_cmd.response.success){
        ROS_INFO("Okay Land");
    }else{
        ROS_ERROR("Failed Land");
    }

    while (n.ok())
    {
      ros::spinOnce();
      r.sleep();
    }

    return 0;
}
#+end_src

  * 실행: ~rosrun drone_command takeoff_and_land~

** 새로운 노드 만들기: ~offb_node~

~drone_command~ 패키지에 ~offb_node~ 노드를 만들어 보자.

2m 이륙.

#+begin_src c++
/**
 * @file offb_node.cpp
 * @brief Offboard control example node, written with MAVROS version 0.19.x, PX4 Pro Flight
 * Stack and tested in Gazebo SITL
 */

#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>

mavros_msgs::State current_state;
void state_cb(const mavros_msgs::State::ConstPtr& msg){
    current_state = *msg;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "offb_node");
    ros::NodeHandle nh;

    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
            ("mavros/state", 10, state_cb);
    ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>
            ("mavros/setpoint_position/local", 10);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
            ("mavros/cmd/arming");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
            ("mavros/set_mode");

    //the setpoint publishing rate MUST be faster than 2Hz
    ros::Rate rate(20.0);

    // wait for FCU connection
    while(ros::ok() && !current_state.connected){
        ros::spinOnce();
        rate.sleep();
    }

    geometry_msgs::PoseStamped pose;
    pose.pose.position.x = 0;
    pose.pose.position.y = 0;
    pose.pose.position.z = 2;

    //send a few setpoints before starting
    for(int i = 100; ros::ok() && i > 0; --i){
        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    mavros_msgs::SetMode offb_set_mode;
    offb_set_mode.request.custom_mode = "OFFBOARD";

    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    ros::Time last_request = ros::Time::now();

    while(ros::ok()){
        if( current_state.mode != "OFFBOARD" &&
            (ros::Time::now() - last_request > ros::Duration(5.0))){
            if( set_mode_client.call(offb_set_mode) &&
                offb_set_mode.response.mode_sent){
                ROS_INFO("Offboard enabled");
            }
            last_request = ros::Time::now();
        } else {
            if( !current_state.armed &&
                (ros::Time::now() - last_request > ros::Duration(5.0))){
                if( arming_client.call(arm_cmd) &&
                    arm_cmd.response.success){
                    ROS_INFO("Vehicle armed");
                }
                last_request = ros::Time::now();
            }
        }

        local_pos_pub.publish(pose);

        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}
#+end_src

  * 실행: ~rosrun drone_command offb_node~

** 새로운 노드 만들기: ~circle~

출처: https://github.com/Jaeyoung-Lim/modudculab_ros/blob/master/src/pub_setpoints_traj.cpp

#+begin_src
/**
 * @file offb_node.cpp
 * @brief offboard example node, written with mavros version 0.14.2, px4 flight
 * stack and tested in Gazebo SITL
 */

#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>
#include "math.h"

double r;
double theta;
double count=0.0;
double wn;

mavros_msgs::State current_state;
void state_cb(const mavros_msgs::State::ConstPtr& msg){
    current_state = *msg;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "circle");
    ros::NodeHandle nh;

    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
            ("mavros/state", 10, state_cb);
    ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>
            ("mavros/setpoint_position/local", 10);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
            ("mavros/cmd/arming");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
            ("mavros/set_mode");

    //the setpoint publishing rate MUST be faster than 2Hz
    ros::Rate rate(20.0);


    nh.param("pub_setpoints_traj/wn", wn, 1.0);
    nh.param("pub_setpoints_traj/r", r, 1.0);
    // wait for FCU connection
    while(ros::ok() && current_state.connected){
        ros::spinOnce();
        rate.sleep();
    }

    geometry_msgs::PoseStamped pose;
    pose.pose.position.x = 0;
    pose.pose.position.y = 0;
    pose.pose.position.z = 2;

    //send a few setpoints before starting
    for(int i = 100; ros::ok() && i > 0; --i){
        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    mavros_msgs::SetMode offb_set_mode;
    offb_set_mode.request.custom_mode = "OFFBOARD";

    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    ros::Time last_request = ros::Time::now();

    while(ros::ok()){
        if( current_state.mode != "OFFBOARD" &&
            (ros::Time::now() - last_request > ros::Duration(5.0))){
            if( set_mode_client.call(offb_set_mode) &&
                offb_set_mode.response.mode_sent){
                ROS_INFO("Offboard enabled");
            }
            last_request = ros::Time::now();
        } else {
            if( !current_state.armed &&
                (ros::Time::now() - last_request > ros::Duration(5.0))){
                if( arming_client.call(arm_cmd) &&
                    arm_cmd.response.success){
                    ROS_INFO("Vehicle armed");
                }
                last_request = ros::Time::now();
            }
        }

    theta = wn*count*0.05;

        pose.pose.position.x = r*sin(theta);
        pose.pose.position.y = r*cos(theta);
        pose.pose.position.z = 2;

    count++;

        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}
#+end_src

  * 실행: ~rosrun drone_command circle~
*** 해보기: 원의 너비와 속도를 바꾸어 보자. 힌트 (wn, r)

** 과제: 키보드로 OFFBOARD 모드 제어하기
 - ~offb_node~ 코드를 참고하여, 키보드로 x,y,z 위치를 제어하여 보자.
 - 참고: http://wiki.ros.org/teleop_twist_keyboard_cpp

** 참고
 - https://github.com/mavlink/mavros/tree/master/mavros
 - https://github.com/Jaeyoung-Lim/modudculab_ros/blob/master/src/pub_setpoints_traj.cpp
