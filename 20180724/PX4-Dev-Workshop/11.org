#+STARTUP: showeverything
#+TITLE:     PX4 Dev Workshop
#+AUTHOR:    Donghee Park
# Creative Commons, Share-Alike (cc)
#+EMAIL:     dongheepark@gmail.com
#+HTML_HEAD_EXTRA: <style type="text/css">img {  width: auto ;  max-width: 100% ;  height: auto ;} .org-src-container {border: 0px; box-shadow: none;}  pre { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word; } </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>

* 수업
 - 일시: 2019. 1. 11
 - 목표: pixy + mavros 응용
 - 교재: https://goo.gl/sDfk3j
 - 코치: 박동희 dongheepark@gmail.com

* 수업 진행
 - pixy + MavROS 연결

* 수업 자료

** PX4 + Gazebo + MAVROS 실행
 - ROS 마스터 노드 실행: ~roscore~
 - Gazebo 실행: ~cd ~/src/Firmware; make px4_sitl_default gazebo~
 - MAVROS 실행: ~rosrun mavros mavros_node _fcu_url:="udp://:14540@127.0.0.1:14557" _gcs_url:="udp://@127.0.0.1"~
 - QGroundControl 실행
 - QGroundControl 실행: PX4 Parameter ~COM_OF_LOSS_T~ 파라미터 10초로 바꾸기. Failsafe timeout을 10초로 바꾸어야 시뮬레이터에서 코딩 편하다.
 - circle node 실행: ~rosrun drone_command circle~ 6번째 수업자료

[[https://i.imgur.com/bjUwLqr.png]]

** ~drone_command~ 패키지에 ~setpoints_from_pixy~ 노드 추가

*** ~/block_data~ 토픽 구독

구독할 토픽 확인: ~rostopic info /block_data~

#+BEGIN_SRC c++
#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>
#include "math.h"

#include <pixy_msgs/PixyData.h>
#include <pixy_msgs/PixyBlock.h>

mavros_msgs::State current_state;

void state_cb(const mavros_msgs::State::ConstPtr& msg){
  current_state = *msg;
}

pixy_msgs::PixyData current_pixy_data;
double x=0.0, y=0.0, z=0.0;

void block_data_cb(const pixy_msgs::PixyData::ConstPtr& msg){
  current_pixy_data = *msg;
  std::vector<pixy_msgs::PixyBlock> pixy_blocks;
  pixy_blocks  = msg->blocks;

  // x_offset range is 0~319
  // y_offset range is 0~199
  // width range is 1~320
  // height range is 1~200

  if( pixy_blocks.size() > 0 ){
    // ignore block size(width) less than 20
    if( pixy_blocks[0].roi.width < 20 ){
      return;
    }

    ROS_INFO("Found Pixy Block");
    ROS_INFO("signiture: %d, x: %d, y:%d, width: %d, height: %d",
        pixy_blocks[0].signature,
        pixy_blocks[0].roi.x_offset,
        pixy_blocks[0].roi.y_offset,
        pixy_blocks[0].roi.width,
        pixy_blocks[0].roi.height
        );

    if( pixy_blocks[0].roi.x_offset < 100 ){
      printf("forward\n");
      x -= 0.1;
    }
    if( pixy_blocks[0].roi.x_offset > 200 ){
      printf("backward\n");
      x += 0.1;
    }
    if ( pixy_blocks[0].roi.y_offset < 30 ){
      printf("up\n");
      z += 0.1;
    }
    if ( pixy_blocks[0].roi.y_offset > 160 ){
      printf("down\n");
      z -= 0.1;
      if (z < 0.1) z = 0.0;
    }
    // left

    // right

  } else {
    //ROS_INFO("Notfound Pixy Block");
  }
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "setpoints_from_pixy");
  ros::NodeHandle nh;

  ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
    ("mavros/state", 10, state_cb);
  ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>
    ("mavros/setpoint_position/local", 10);
  ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
    ("mavros/cmd/arming");
  ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
    ("mavros/set_mode");

  // subscribe pixy block data
  ros::Subscriber block_data_sub = nh.subscribe<pixy_msgs::PixyData>
    ("block_data", 50, block_data_cb);

  //the setpoint publishing rate MUST be faster than 2Hz
  ros::Rate rate(20.0);

  // wait for FCU connection
  while(ros::ok() && current_state.connected){
    ros::spinOnce();
    rate.sleep();
  }

  geometry_msgs::PoseStamped pose;
  pose.pose.position.x = 0;
  pose.pose.position.y = 0;
  pose.pose.position.z = 2;

  //send a few setpoints before starting
  for(int i = 100; ros::ok() && i > 0; --i){
    local_pos_pub.publish(pose);
    ros::spinOnce();
    rate.sleep();
  }

  mavros_msgs::SetMode offb_set_mode;
  offb_set_mode.request.custom_mode = "OFFBOARD";

  mavros_msgs::CommandBool arm_cmd;
  arm_cmd.request.value = true;

  ros::Time last_request = ros::Time::now();

  while(ros::ok()){
    if( current_state.mode != "OFFBOARD" &&
        (ros::Time::now() - last_request > ros::Duration(5.0))){
      if( set_mode_client.call(offb_set_mode) &&
          offb_set_mode.response.mode_sent){
        ROS_INFO("Offboard enabled");
      }
      last_request = ros::Time::now();
    } else {
      if( !current_state.armed &&
          (ros::Time::now() - last_request > ros::Duration(5.0))){
        if( arming_client.call(arm_cmd) &&
            arm_cmd.response.success){
          ROS_INFO("Vehicle armed");
        }
        last_request = ros::Time::now();
      }
    }

    pose.pose.position.x = x;
    pose.pose.position.y = y;
    pose.pose.position.z = z;

    local_pos_pub.publish(pose);
    ros::spinOnce();
    rate.sleep();
  }

  return 0;
}

#+END_SRC

** 실습 키보드 입력 받아서 x,y,z축 이동

~teleop_twist_keyboard~ 노드 이용

https://github.com/ros-teleop/teleop_twist_keyboard

a 를 누루면 left, d를 누루면 right 이동하기

** gazebo에 드론 모델 추가

해보기: gazebo에 드론 모델을 추가하여 시뮬레이션해보자. ~Firmware/Tools/sitl_gazebo/models/iris_irlock~ 폴더 참고

 - 카메라 추가 http://discuss.px4.io/t/how-to-add-a-ros-camera-to-iris-for-gazebo-simulation/5118/11

** TF 이용해서 드론 제어를 해보자.
