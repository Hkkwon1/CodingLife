#+STARTUP: showeverything
#+TITLE:     PX4 Dev Workshop 
#+AUTHOR:    Donghee Park
# Creative Commons, Share-Alike (cc)
#+EMAIL:     dongheepark@gmail.com
#+HTML_HEAD_EXTRA: <style type="text/css">img {  width: auto ;  max-width: 100% ;  height: auto ;} </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>

* 수업
 - 일시: 2018. 
 - 목표: ROS를 설치하고 ROS 예제를 빌드하고 수정할 수 있다.
 - 교재: https://goo.gl/sDfk3j
 - 코치: 박동희 dongheepark@gmail.com

* 수업 진행
 - ROS 소개,
  - ROS미들웨어,
  - ROS 컴포넌트 라이브러리
  - Node, Topics, Message Passing, Services
 - Hello ROS (catkin build)
 - 드론 관련 패키지 소개


* 수업 자료

** ROS
 - Robot Operating System: 로봇 빌들에 사용되는 라이브러리 어플리케이션 모음 http://www.ros.org/
 - 목표: 로봇을 만들때 기존의 재활용 하고 공유하자. 
 - History:
  - 2000s: Standford Artificial intelligence
  - 2007: Willow Garage
  - 2013: Open Source Robotics Foundation
 - 사용 분야: Drone, Kinematic ARMS(로봇암), Wheeled(바퀴), Bi-pedal(이족)

** ROS Nodes and Topics

# https://misohena.jp/article/emacs_org_textfigures/dot.html

#+begin_src dot :file ros_nodes_and_topics1.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR
  graph [fontname="MS Gothic"];
  node [shape=rect, color="#40e0d0"]
  edge [fontname="MS Gothic"];
  label = "Robot Communication Sequence";
  "Perception" -> "Dicesion Making";
  "Dicesion Making" -> "Actuation";
}
#+end_src

*** ROS Master Process

노드 관리

#+begin_src dot :file ros_master_process1.png :cmdline -Kdot -Tpng
digraph {
  graph [fontname="MS Gothic"];
  node [shape=box, color="#40e0d0"]
  edge [fontname="MS Gothic"];
  label = "ROS Master Process";

  subgraph cluster_perception {
    node [shape=rect, style="rounded"]
    label = "Perception";
    Camera;
    "Wheel Encoder";
    "Positon Estimator";
  }

  subgraph cluster_dicesion_making {
    node [shape=rect, style="rounded"]
    label = "Dicesion Making";
    "Behavior Execution";
  }

  subgraph cluster_actuation {
    node [shape=rect, style="rounded"]
    label = "Actuation";
    "Motor Control";
  }
}
#+end_src

*** Topics

노드간 통신 인터페이스. 구독 발행의 이름

#+begin_src dot :file ros_topic1.png :cmdline -Kdot -Tpng 
digraph {
  rankdir=LR
  node [color="#40e0d0"]
  edge [fontname="MS Gothic"];
  node1 [label= ""]
  node2 [label= ""]

  node1 -> node2 [label="/topic_name"];
}

#+end_src

*** Publish and Subscribe

발행과 구독. 신문/잡지 발행 구독에 비유

#+begin_src dot :file ros_publish_and_subscribe1.png :cmdline -Kdot -Tpng 
digraph {
  rankdir=LR
  node [color="#40e0d0"]
  edge [fontname="MS Gothic"];
  label = "      PUBLISH           SUBSCRIBER";
  node1 [label= ""]
  node2 [label= ""]

  node1 -> node2
  node2 -> node1
}
#+end_src

실제 예제 

#+begin_src dot :file ros_publish_and_subscribe2.png :cmdline -Kdot -Tpng 
digraph {
  node [color="#40e0d0"]
  edge [fontname="MS Gothic"];

  "Wheel Encoder" -> "Positon Estimator" [label="/wheel_encoder\lrotation"]
  "Behavior Executor" -> "Motor Controller" [label="/motor_controller\lvelocity_cmd"]
  "Camera" -> "Behavior Executor" [label="/camera_images\limage"]
  "Positon Estimator" -> "Behavior Executor" [label="/position_estimate\lpose"]
}
#+end_src

** ROS Message Passing

메시지: 노드간 통신할때 이동하는 실제 데이터
 - 메시지는 텍스트로 구성. 메시지를 이해하기 쉽다.

미리 정의된 메시지 타입 : 
 - http://wiki.ros.org/common_msgs 
 - https://github.com/ros/common_msgs

** ROS Services

 - Request-Response, 1:1 통신
 - PubSub이 필요 없는 경우 사용, 요청 할때만 데이터가 제공. 네트워크 부하가 적다.

*** 예시: 카메라 이미지 얻기



#+begin_src dot :file ros_services1.png :cmdline -Kdot -Tpng 
digraph {
  rankdir=LR;
  node [color="#40e0d0"];
  edge [fontname="MS Gothic"];
  label = "Publicate and Subscribe";

  "Camera" -> "Behavior Executor" [label="/camera_images\limage"]
}
#+end_src

#+begin_src dot :file ros_services2.png :cmdline -Kdot -Tpng 
digraph {
  rankdir=LR;
  node [color="#40e0d0"];
  edge [fontname="MS Gothic", style=dotted];
  label = "Request-Response";


  "Behavior Executor" -> "Camera" [label="/capture_image\lrequest: exposure time"]
  "Camera" -> "Behavior Executor" [label="\nresponse: image"]
}
#+end_src

** ROS Turtlesim

Turtle

#+ATTR_HTML: width="200px"
[[https://i.imgur.com/0r46gFH.png]]

*** Turtlesim 실행하기

[[https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58d9820b_running-turtlesim/running-turtlesim.png]]


1. 환경 변수 설정

#+begin_src sh
$ source /opt/ros/kinetic/setup.bash
#+end_src

2. roscore 실행 
 - roscore: Master + rosout + parameter server
  - Master: 네임 서비스
  - rosout: stdout/stderr 로깅
  - parameter server: 파라미터 저장 서버 

#+begin_src sh
$ roscore
#+end_src

3. turtlesim 패키지의 turtlesim_node 실행 
#+begin_src sh
$ rosrun turtlesim turtlesim_node
#+end_src

4. turtlesim 패키지의 turtle_teleop_key 실행
#+begin_src sh
rosrun turtlesim turtle_teleop_key
#+end_src

*** Turtlesim 노드 목록

#+begin_src sh
rosnode list
#+end_src

/rosout : ROS 메시지 로깅. 

*** Turtlesim 토픽 목록
#+begin_src sh
rostopic list
#+end_src

*** Turtlesim 토픽 정보 

#+begin_src sh
rostopic info /turtle1/cmd_vel

#+end_src

*** Turtlesim 메시지 정보

#+begin_src sh
$ rosmsg info geometry_msg/Twist
geometry_msgs/Vector3 linear
  float64 x
  float64 y
  float64 z
geometry_msgs/Vector3 angular
  float64 x
  float64 y
  float64 z
#+end_src

or

#+begin_src sh
rosed geometry_msgs Twist.msg
#+end_src

*** Turtlesim Echo a Topic

디버깅시 편리

#+begin_src sh
rostopic echo /turtle1/cmd_vel
#+end_src

***  ~rqt_graph~

#+begin_src sh
rqt_graph
#+end_src

[[http://wiki.ros.org/rqt_graph?action=AttachFile&do=get&target=snap_rqt_graph_moveit_demo.png]]


** Gazebo Install

https://goo.gl/fzhFYX
 
#+begin_src sh 
$ sudo apt-get remove '.*gazebo.*' '.*sdformat.*' '.*ignition-math.*' '.*ignition-msgs.*' '.*ignition-transport.*'
$ sudo apt-get install ros-kinetic-desktop-full -y
#+end_src
 
** MavROS 설치 및 실행 

https://goo.gl/JcPk1Q
 
#+begin_src sh
 
## Create catkin workspace (ROS build system)
mkdir -p ~/catkin_ws/src
cd ~/catkin_ws

## Install dependencies
sudo apt-get install python-wstool python-rosinstall-generator python-catkin-tools -y

## Initialise wstool
wstool init ~/catkin_ws/src

## Build MAVROS
### Get source (upstream - released)
rosinstall_generator --upstream mavros --rosdistro kinetic | tee /tmp/mavros.rosinstall
### Get latest released mavlink package
rosinstall_generator mavlink --rosdistro kinetic | tee -a /tmp/mavros.rosinstall
### Setup workspace & install deps
wstool merge -t src /tmp/mavros.rosinstall
wstool update -t src
rosdep install --from-paths src --ignore-src --rosdistro kinetic -y

catkin build

roslaunch mavros px4.launch
#+end_src

#+begin_src sh 
rosrun mavros mavros_node _fcu_url:="udp://:14540@127.0.0.1:14557"
#+end_src

** Gazebo 실행  
#+begin_src sh
$ make posix_sitl_default gazebo
#+end_src

* 참고
 - http://wiki.ros.org/ko/ROS/Tutorials
 - https://github.com/robotpilot/ros-seminar
 - ROS 설치: http://wiki.ros.org/kinetic/Installation/Ubuntu
 - MAVROS 설치: https://github.com/mavlink/mavros/tree/master/mavros

* 과제
 - Nvidia TX2에 ROS 설치와 MAVROS(catkin build) 설치 
 - Nvidia TX2에서 Turtlesim 노드 실행해보기 (참고: https://shiroku.net/robotics/setup-ros-on-jetson-tx2/)
 - TX2에 Pixhawk(PX4) 연결방법 알아보기 
