#+STARTUP: showeverything
#+TITLE:     PX4 Dev Workshop
#+AUTHOR:    Donghee Park
# Creative Commons, Share-Alike (cc)
#+EMAIL:     dongheepark@gmail.com
#+HTML_HEAD_EXTRA: <style type="text/css">img {  width: auto ;  max-width: 100% ;  height: auto ;} .org-src-container {border: 0px; box-shadow: none;}  pre { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word; } </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>

* 수업
 - 일시: 2018.
 - 목표: ROS 노드를 만들 수 있다.
 - 교재: https://goo.gl/sDfk3j
 - 코치: 박동희 dongheepark@gmail.com

* 수업 진행
 - MAVROS 노드 만들기

* 수업 자료

** 새로운 노드 만들기

*** 패키지 만들기

#+begin_src sh
$ source ~/catkin_ws/devel/setup.bash
$ cd ~/catkin_ws/src
$ catkin_create_pkg drone_state mavros sensor_msgs roscpp
#+end_src

*** 노드 코드 작성

~/home/donghee/catkin_ws/src/drone_state/src/drone_state.cpp~
#+begin_src c++

#include "ros/ros.h"
#include "sensor_msgs/Imu.h"

void imuDataCallback(const sensor_msgs::Imu::ConstPtr& msg){
  ROS_INFO("\nlinear acceleration\
      \nx: [%f]\ny:[%f]\nz:[%f]", msg->linear_acceleration.x,
      msg->linear_acceleration.y, msg->linear_acceleration.z);
}

int main(int argc, char **argv){
  ros::init(argc, argv, "drone_state");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("/mavros/imu/data", 1000, imuDataCallback);
  ros::spin();
  return 0;
}
#+end_src

빌드 스크립트 추가

~~/catkin_ws/src/drone_state/CMakeLists.txt~ 파일 끝에 다음 3줄 추가

#+begin_src cmake
include_directories(include ${catkin_INCLUDE_DIRS})
add_executable(drone_state src/drone_state.cpp)
target_link_libraries(drone_state ${catkin_LIBRARIES})
#+end_src

환경 변수 다시 로드!
#+begin_src sh
$ source ~/catkin_ws/devel/setup.bash
#+end_src

*** 패키지 빌드

#+begin_src sh
$ cd ~/catkin_ws
$ catkin build
#+end_src

*** 패키지 노드 실행

~drone_state~ 패키지의 ~drone_state~ 노드 실행
#+begin_src sh
$ rosrun drone_state drone_state
#+end_src


*** 해보기: /mavros/state 읽어서 1초마다 비행 mode 한번씩 출력
 - ~/mavros/state~ 타입 체크하여 헤더 include

#+BEGIN_SRC c++

#include "ros/ros.h"
#include "mavros_msgs/State.h"

void droneStateCallback(const mavros_msgs::State::ConstPtr& msg){
  ROS_INFO("\nDrone mode: %s", msg->mode.c_str());
}

int main(int argc, char **argv){
  ros::init(argc, argv, "drone_state");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("/mavros/state", 1000, droneStateCallback);
  ros::spin();
  return 0;
}
#+END_SRC

*** 해보기 결과:

#+begin_src c++
$ rosrun drone_state drone_state
[ INFO] [1539297808.077868114]:
Drone mode: OFFBOARD
[ INFO] [1539297808.525173697]:
Drone mode: OFFBOARD
[ INFO] [1539297809.565387356]:
Drone mode: OFFBOARD
#+end_src

~rqt_graph~

[[https://i.imgur.com/CGHQVwc.png]]


** 새로운 노드 만들기: 드론 이륙 착륙

#+begin_src dot :file mavros_takeoff_and_land1.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR
  graph [fontname="NanumSquare"];
  node [shape=rect, color="#40e0d0"]
  edge [style=dashed, fontname="NanumSquare"];
  node1 [label= "/takeoff_and_land"]
  node2 [label= "/mavros"]

  node1 -> node2 [label="1. /mavros/cmd/arming"];
  node1 -> node2 [label="2. /mavros/cmd/takeoff"];
  node1 -> node2 [label="3. /mavros/cmd/land"];
}
#+end_src

~drone_command~ 패키지에 ~takeoff_and_land~ 노드를 만들어 보자.

2.5m 이륙후 10초 있다가 착륙

#+begin_src c++
#include <cstdlib>

#include <ros/ros.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/CommandTOL.h>
#include <mavros_msgs/SetMode.h>

#include <geometry_msgs/PoseStamped.h>

int main(int argc, char **argv)
{

    int rate = 20;

    ros::init(argc, argv, "takeoff_and_land");
    ros::NodeHandle n;

    ros::Rate r(rate);

    ///////////////////ARM//////////////////////
    ros::ServiceClient arming_client = n.serviceClient<mavros_msgs::CommandBool>("/mavros/cmd/arming");
    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    if (arming_client.call(arm_cmd) && arm_cmd.response.success)
    {
        ROS_INFO("Vehicle armed");
    } else {
        ROS_ERROR("Failed arming or disarming");
    }

    /////////////////TAKEOFF////////////////////
    ros::ServiceClient takeoff_client = n.serviceClient<mavros_msgs::CommandTOL>("/mavros/cmd/takeoff");
    mavros_msgs::CommandTOL takeoff_cmd;
    takeoff_cmd.request.altitude = 10;
    takeoff_cmd.request.latitude = 0;
    takeoff_cmd.request.longitude = 0;
    takeoff_cmd.request.min_pitch = 0;
    takeoff_cmd.request.yaw = 0;
    if(takeoff_client.call(takeoff_cmd) && takeoff_cmd.response.success){
        ROS_INFO("Okay Takeoff");
    }else{
        ROS_ERROR("Failed Takeoff");
    }

    /////////////////DO STUFF///////////////////
    sleep(10);


    ///////////////////LAND/////////////////////
    ros::ServiceClient land_client = n.serviceClient<mavros_msgs::CommandTOL>("/mavros/cmd/land");
    mavros_msgs::CommandTOL land_cmd;
    land_cmd.request.altitude = 0;
    land_cmd.request.latitude = 0;
    land_cmd.request.longitude = 0;
    land_cmd.request.min_pitch = 0;
    land_cmd.request.yaw = 0;
    if(land_client.call(land_cmd) && land_cmd.response.success){
        ROS_INFO("Okay Land");
    }else{
        ROS_ERROR("Failed Land");
    }

    while (n.ok())
    {
      ros::spinOnce();
      r.sleep();
    }

    return 0;
}
#+end_src

  * 실행: ~rosrun drone_command takeoff_and_land~

** 새로운 노드 만들기: ~offb_node~

~drone_command~ 패키지에 ~offb_node~ 노드를 만들어 보자.

2m 이륙.

#+begin_src c++
/**
 * @file offb_node.cpp
 * @brief Offboard control example node, written with MAVROS version 0.19.x, PX4 Pro Flight
 * Stack and tested in Gazebo SITL
 */

#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>

mavros_msgs::State current_state;
void state_cb(const mavros_msgs::State::ConstPtr& msg){
    current_state = *msg;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "offb_node");
    ros::NodeHandle nh;

    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
            ("mavros/state", 10, state_cb);
    ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>
            ("mavros/setpoint_position/local", 10);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
            ("mavros/cmd/arming");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
            ("mavros/set_mode");

    //the setpoint publishing rate MUST be faster than 2Hz
    ros::Rate rate(20.0);

    // wait for FCU connection
    while(ros::ok() && !current_state.connected){
        ros::spinOnce();
        rate.sleep();
    }

    geometry_msgs::PoseStamped pose;
    pose.pose.position.x = 0;
    pose.pose.position.y = 0;
    pose.pose.position.z = 2;

    //send a few setpoints before starting
    for(int i = 100; ros::ok() && i > 0; --i){
        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    mavros_msgs::SetMode offb_set_mode;
    offb_set_mode.request.custom_mode = "OFFBOARD";

    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    ros::Time last_request = ros::Time::now();

    while(ros::ok()){
        if( current_state.mode != "OFFBOARD" &&
            (ros::Time::now() - last_request > ros::Duration(5.0))){
            if( set_mode_client.call(offb_set_mode) &&
                offb_set_mode.response.mode_sent){
                ROS_INFO("Offboard enabled");
            }
            last_request = ros::Time::now();
        } else {
            if( !current_state.armed &&
                (ros::Time::now() - last_request > ros::Duration(5.0))){
                if( arming_client.call(arm_cmd) &&
                    arm_cmd.response.success){
                    ROS_INFO("Vehicle armed");
                }
                last_request = ros::Time::now();
            }
        }

        local_pos_pub.publish(pose);

        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}
#+end_src

  * 실행: ~rosrun drone_command offb_node~

** 새로운 노드 만들기: ~circle~

출처: https://github.com/Jaeyoung-Lim/modudculab_ros/blob/master/src/pub_setpoints_traj.cpp

#+begin_src
/**
 * @file offb_node.cpp
 * @brief offboard example node, written with mavros version 0.14.2, px4 flight
 * stack and tested in Gazebo SITL
 */

#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>
#include "math.h"

double r;
double theta;
double count=0.0;
double wn;

mavros_msgs::State current_state;
void state_cb(const mavros_msgs::State::ConstPtr& msg){
    current_state = *msg;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "circle");
    ros::NodeHandle nh;

    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
            ("mavros/state", 10, state_cb);
    ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>
            ("mavros/setpoint_position/local", 10);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
            ("mavros/cmd/arming");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
            ("mavros/set_mode");

    //the setpoint publishing rate MUST be faster than 2Hz
    ros::Rate rate(20.0);


    nh.param("pub_setpoints_traj/wn", wn, 1.0);
    nh.param("pub_setpoints_traj/r", r, 1.0);
    // wait for FCU connection
    while(ros::ok() && current_state.connected){
        ros::spinOnce();
        rate.sleep();
    }

    geometry_msgs::PoseStamped pose;
    pose.pose.position.x = 0;
    pose.pose.position.y = 0;
    pose.pose.position.z = 2;

    //send a few setpoints before starting
    for(int i = 100; ros::ok() && i > 0; --i){
        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    mavros_msgs::SetMode offb_set_mode;
    offb_set_mode.request.custom_mode = "OFFBOARD";

    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    ros::Time last_request = ros::Time::now();

    while(ros::ok()){
        if( current_state.mode != "OFFBOARD" &&
            (ros::Time::now() - last_request > ros::Duration(5.0))){
            if( set_mode_client.call(offb_set_mode) &&
                offb_set_mode.response.mode_sent){
                ROS_INFO("Offboard enabled");
            }
            last_request = ros::Time::now();
        } else {
            if( !current_state.armed &&
                (ros::Time::now() - last_request > ros::Duration(5.0))){
                if( arming_client.call(arm_cmd) &&
                    arm_cmd.response.success){
                    ROS_INFO("Vehicle armed");
                }
                last_request = ros::Time::now();
            }
        }

    theta = wn*count*0.05;

        pose.pose.position.x = r*sin(theta);
        pose.pose.position.y = r*cos(theta);
        pose.pose.position.z = 2;

    count++;

        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}
#+end_src

  * 실행: ~rosrun drone_command circle~
*** 해보기: 원의 너비와 속도를 바꾸어 보자. 힌트 (wn, r)

** 과제: 키보드로 OFFBOARD 모드 제어하기
 - ~offb_node~ 코드를 참고하여, 키보드로 x,y,z 위치를 제어하여 보자.
 - 참고: http://wiki.ros.org/teleop_twist_keyboard_cpp

** 참고
 - https://github.com/mavlink/mavros/tree/master/mavros
 - https://github.com/Jaeyoung-Lim/modudculab_ros/blob/master/src/pub_setpoints_traj.cpp



# ** mavlink 자료

# http://wiki.ros.org/teleop_twist_keyboard
# http://wiki.ros.org/teleop_twist_keyboard_cpp

#  - J120 Manusl: https://auvidea.com/download/manual/J120/J120_technical_reference_1.6.pdf

#  - https://docs.google.com/presentation/d/1IyMQnE28jnA0w8T_SoSE8AI8UmWZOYLQLuBpezKEV6E/edit#slide=id.g3eb7d5167d_0_21
#  - https://bitbucket.org/Jeyong/px4/src/master/modules/mavlink.md?mode=edit&spa=0&at=master&fileviewer=file-view-default
#  - https://github.com/NVIDIA-Jetson/redtail/wiki/Skypad-TBS-Discovery-Setup
#  - https://github.com/NVIDIA-Jetson/redtail/wiki/Launch-Sequence-and-Flying
#  - https://mikeisted.wordpress.com/2018/08/14/1-ros-for-uavs-setup/
#  - https://mikeisted.wordpress.com/2018/08/16/2-coding-uavs-with-ros-subscribing-to-fcu-data/
#  - ros https://discuss.bluerobotics.com/t/simulating-manual-control-using-mavros/1745/50
#  - https://github.com/Jaeyoung-Lim/modudculab_ros/blob/master/src/pub_setpoints_traj.cpp
#  - https://github.com/claymation/lander
#  - https://github.com/vijayaganesh/wolfdrone/blob/master/scripts/mission/lib/droneTracker.py
#  - https://github.com/emlid/mavros-navio-cpp-example
#  - https://github.com/NVIDIA-Jetson/redtail/blob/master/ros/packages/px4_controller/src/px4_controller.cpp
