
#+STARTUP: showeverything
#+TITLE:     PX4 Dev Workshop
#+AUTHOR:    Donghee Park
# Creative Commons, Share-Alike (cc)
#+EMAIL:     dongheepark@gmail.com
#+HTML_HEAD_EXTRA: <style type="text/css">img {  width: auto ;  max-width: 100% ;  height: auto ;} .org-src-container {border: 0px; box-shadow: none;}  pre { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word; } </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>

* 수업
 - 일시: 2018.
 - 목표: OpenCV in ROS, ~cv_bridge~
 - 교재: https://goo.gl/sDfk3j
 - 코치: 박동희 dongheepark@gmail.com

* 수업 진행
 - OPENCV
 - ~cv_bridge~
 - ~rqt_image_view~

* 수업 자료

** 이미지 포멧

 - ROS ~sensor_msgs/Image~ http://docs.ros.org/api/sensor_msgs/html/msg/Image.html
 - OpenCV ~cv::Mat~

#+BEGIN_SRC
rosmsg info sensor_msgs/Image
#+END_SRC

** ~cv_bridge~

ROS에서의 OpenCV 인터페이스

[[http://wiki.ros.org/cv_bridge?action=AttachFile&do=get&target=cvbridge.png]]

*** CvImage

#+BEGIN_SRC c++
namespace cv_bridge {

class CvImage
{
public:
  std_msgs::Header header;
  std::string encoding;
  cv::Mat image;
};

typedef boost::shared_ptr<CvImage> CvImagePtr;
typedef boost::shared_ptr<CvImage const> CvImageConstPtr;

}
#+END_SRC

** 예시: image converter

#+BEGIN_SRC
cd ~/catkin_ws/src
catkin_create_pkg cv_test sensor_msgs cv_bridge roscpp rospy std_msgs image_transport
#+END_SRC

#+BEGIN_SRC
cd cv_test/src

cat > image_converter.cpp

#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

static const std::string OPENCV_WINDOW = "Image window";

class ImageConverter
{
  ros::NodeHandle nh_;
  image_transport::ImageTransport it_;
  image_transport::Subscriber image_sub_;
  image_transport::Publisher image_pub_;

public:
  ImageConverter()
    : it_(nh_)
  {
    // Subscrive to input video feed and publish output video feed
    image_sub_ = it_.subscribe("/cv_camera/image_raw", 1,
      &ImageConverter::imageCb, this);
    image_pub_ = it_.advertise("/image_converter/output_video", 1);

    cv::namedWindow(OPENCV_WINDOW);
  }

  ~ImageConverter()
  {
    cv::destroyWindow(OPENCV_WINDOW);
  }

  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }

    // Draw an example circle on the video stream
    if (cv_ptr->image.rows > 60 && cv_ptr->image.cols > 60)
      cv::circle(cv_ptr->image, cv::Point(50, 50), 10, CV_RGB(255,0,0));

    // Update GUI Window
    cv::imshow(OPENCV_WINDOW, cv_ptr->image);
    cv::waitKey(3);

    // Output modified video stream
    image_pub_.publish(cv_ptr->toImageMsg());
  }
};

int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_converter");
  ImageConverter ic;
  ros::spin();
  return 0;
}
#+END_SRC

CMakeLists.txt 에 다음 내용 추가
 - ~image_converter~ 노드 컴파일 추가
 - OpenCV 라이브러리 추가

#+BEGIN_SRC
set(OpenCV_DIR /home/donghee/tmp/installation/OpenCV-3.4.4/share/OpenCV/)
find_package( OpenCV REQUIRED )

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

include_directories(include ${OpenCV_INCLUDE_DIRS})

include_directories(include ${catkin_INCLUDE_DIRS})
add_executable(image_converter src/image_converter.cpp)
target_link_libraries(image_converter ${catkin_LIBRARIES})

target_link_libraries(image_converter ${OpenCV_LIBS})
#+END_SRC

#+BEGIN_SRC
cd ~/catkin_ws
catkin build cv_test
#+END_SRC

** 예시: image converter 실행

*ros-kinetic-cv-camera 설치*

#+BEGIN_SRC
sudo apt-get install ros-kinetic-cv-camera
+END_SRC

*ros master node 실행*
#+BEGIN_SRC
roscore
#+END_SRC

*cv_camera_node 실행*
#+BEGIN_SRC
rosrun cv_camera cv_camera_node
#+END_SRC

*토픽 목록 보기*
#+BEGIN_SRC
rostopic list -v
#+END_SRC

*** 구독 ~/cv_camera/image_raw~ 이미지 보기
image converter 에서 구독(subscribe) 하는 토픽

#+BEGIN_SRC
rosrun image_view image_view image:=/cv_camera/image_raw
// or using rqt
rqt_image_view /cv_camera/image_raw
#+END_SRC

*** 발행 ~/image_converter/output_video~ 이미지 보기
image converter 에서 publish 하는 토픽

#+BEGIN_SRC
rosrun image_view image_view image:=/image_converter/output_video
// or using rqt
rqt_image_view /image_converter/output_video
#+END_SRC

*rviz*
#+BEGIN_SRC
rviz
#+END_SRC

[[https://i.imgur.com/jsulKek.png]]

** 예시: object detection: ~dnn_detect~

#+BEGIN_SRC
sudo apt install ros-kinetic-dnn-detect
roslaunch dnn_detect dnn_detect.launch camera:=/cv_camera image:=image_raw
rostopic echo /dnn_objects
rosrun image_view image_view image:=/dnn_images
#+END_SRC

#+BEGIN_SRC
rostopic list -v
#+END_SRC

** 예시: tag detection: aruco

[[https://i.imgur.com/pa6a5HY.png]]

*ros-kinetic-aruco-ros 설치*
#+BEGIN_SRC
sudo apt-get install ros-kinetic-aruco-ros

#+END_SRC

~aruco_test.launch~ 작성
#+BEGIN_SRC
<launch>

<arg name="markerId" default="701"/>
<arg name="markerSize" default="0.05"/> <!-- in meter -->
<arg name="eye" default="left"/>
<arg name="marker_frame" default="marker_frame"/>
<arg name="ref_frame" default=""/> <!-- leave empty and the pose will be published wrt param parent_name -->
<arg name="corner_refinement" default="LINES" /> <!-- NONE, HARRIS, LINES, SUBPIX -->


<node pkg="aruco_ros" type="single" name="aruco_single">
<remap from="/camera_info" to="/cv_camera/camera_info" />
<remap from="/image" to="/cv_camera/image_raw" />
<param name="image_is_rectified" value="True"/>
<param name="marker_size" value="$(arg markerSize)"/>
<param name="marker_id" value="$(arg markerId)"/>
<param name="reference_frame" value="$(arg ref_frame)"/> <!-- frame in which the marker pose will be refered -->
<param name="camera_frame" value="base_link"/>
<param name="marker_frame" value="$(arg marker_frame)" />
<param name="corner_refinement" value="$(arg corner_refinement)" />
//<param name="calibration_file" type="string" value="/tmp/ost.yaml"/>
</node>

</launch>
#+END_SRC

*aruco 노드 실행*
#+BEGIN_SRC
roslaunch aruco_test.launch
#+END_SRC

*마커 결과 확인*
#+BEGIN_SRC
rosrun image_view image_view image:=/aruco_single/result
#+END_SRC

** 예시: position estimation using aruco

[[https://i.imgur.com/arFC1S0.png]]

*마커 위치/자세 확인*
#+BEGIN_SRC
rostopic echo /aruco_single/pose
#+END_SRC

*** Camera Calibration

http://wiki.ros.org/camera_calibration
http://wiki.ros.org/camera_calibration/Tutorials/MonocularCalibration


*camera calibration 실행*
#+BEGIN_SRC
rosrun camera_calibration cameracalibrator.py --size 8x6 --square 0.025 image:=/cv_camera/image_raw camera:=/cv_camera
#+END_SRC

*calibration 파일 추가 ost.yaml*
~aruco_test.launch~ 에 다음 내용 추가.

#+BEGIN_SRC
<param name="calibration_file" type="string" value="/tmp/ost.yaml"/>
#+END_SRC

* 참고
 - http://wiki.ros.org/vision_opencv
 - http://wiki.ros.org/cv_bridge/Tutorials/UsingCvBridgeToConvertBetweenROSImagesAndOpenCVImages
 - aruco maker generator http://chev.me/arucogen/
 - http://wiki.ros.org/dnn_detect
