
#+STARTUP: showeverything
#+AUTHOR:    Donghee Park
# Creative Commons, Share-Alike (cc)
#+EMAIL:     dongheepark@gmail.com
#+TITLE: PX4 and ROS Programming: python ros node
#+HTML_HEAD_EXTRA: <style type="text/css">img {  width: auto ;  max-width: 100% ;  height: auto ;} </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

** 새로운 노드 만들기 (python)

*** 노드 코드 작성

~~/catkin_ws/src/drone_control/scripts/offb_node.py~

#+begin_src c++
#!/usr/bin/env python

import rospy

from geometry_msgs.msg import PoseStamped
from mavros_msgs.msg import State
from mavros_msgs.srv import CommandBool, CommandBoolRequest
from mavros_msgs.srv import SetMode, SetModeRequest

current_state = State()
def state_cb(msg):
    global current_state
    current_state = msg

def offboard_node():

    rospy.init_node("offb_node")
    r = rospy.Rate(20)

    rospy.Subscriber("mavros/state", State, state_cb)
    local_pos_pub = rospy.Publisher("mavros/setpoint_position/local",
                                     PoseStamped,
                                     queue_size=10)
    arming_client = rospy.ServiceProxy("mavros/cmd/arming", CommandBool)
    set_mode_client = rospy.ServiceProxy("mavros/set_mode", SetMode)

    while not rospy.is_shutdown() and not current_state.connected:
        r.sleep()

    pose = PoseStamped()
    pose.pose.position.x = 0
    pose.pose.position.y = 0
    pose.pose.position.z = 2

    for i in range(100):
        local_pos_pub.publish(pose)
        r.sleep()

        if rospy.is_shutdown():
            break

    offb_set_mode = SetModeRequest()
    offb_set_mode.custom_mode = "OFFBOARD"

    arm_cmd = CommandBoolRequest()
    arm_cmd.value = True

    last_request = rospy.Time.now()

    while not rospy.is_shutdown():
        if current_state.mode != "OFFBOARD" \
              and (rospy.Time.now() - last_request > rospy.Duration(5)):

            try:
                offb_set_mode_resp = set_mode_client(offb_set_mode)
                if offb_set_mode_resp.mode_sent:
                    rospy.loginfo("Offboard enabled")
            except rospy.ServiceException as e:
                rospy.logwarn(e)

            last_request = rospy.Time.now()

        else:
          if not current_state.armed \
                and (rospy.Time.now() - last_request > rospy.Duration(5)):

            try:
                arm_cmd_resp = arming_client(arm_cmd)
                if arm_cmd_resp.success:
                    rospy.loginfo("Vehicle armed")
            except rospy.ServiceException as e:
                rospy.logwarn(e)

            last_request = rospy.Time.now()

        local_pos_pub.publish(pose)
        r.sleep()

if __name__ == "__main__":
    try:
        offboard_node()
    except rospy.ROSInterruptException:
        pass
#+end_src

실행 권한 추가

#+begin_src py
$ cd ~/catkin_ws/src/drone_control/scripts
$ chmod +x offb_node.py
#+end_src

환경 변수 다시 로드!
#+begin_src sh
$ source ~/catkin_ws/devel/setup.bash
#+end_src

*** 패키지 빌드

#+begin_src sh
$ cd ~/catkin_ws
$ catkin build
#+end_src

*** 패키지 노드 실행

~drone_control~ 패키지의 ~offb_node~ 노드 실행
#+begin_src sh
$ rosrun drone_control offb_node.py
#+end_src

*** launch file
~~/catkin_ws/src/drone_control/launch/offb_node.launch~
#+begin_src
<launch>
    <node name="offb_node" pkg="drone_control" type="offb_node.py"/>
    <include file="$(find px4)/launch/mavros_posix_sitl.launch">
      <arg name="vehicle" value="iris"/>
    </include>
</launch>
#+end_src

[[https://i.imgur.com/F2iCEwH.png]]


** keyboard 사용하여 setpoint 보내기

~~catkin_ws/src/drone_control/scripts/mavteleop_key.py~ 추가

#+begin_src
#!/usr/bin/env python

import rospy
import curses
from std_srvs.srv import *

from geometry_msgs.msg import Vector3, TwistStamped

rospy.init_node('mavros_teleop_key', anonymous=True)

#vel_pub = rospy.Publisher("mavros/setpoint_velocity/cmd_vel",
#                                 TwistStamped,
#                                 queue_size=10)

vel_pub = rospy.Publisher("drone_control/cmd_vel",
                                 TwistStamped,
                                 queue_size=10)


stdscr = curses.initscr()
curses.cbreak()
stdscr.keypad(1)

stdscr.addstr(0, 10, "Hit 'x' to quit")
stdscr.refresh()

key = ''
throttle = 0
rotation = [0,0,0]

while True:
    key = stdscr.getch()

    if key == ord('x'):
        break

    dirty = False

    if key == ord('z'):
        throttle = 0
        rotation = [0,0,0]
        dirty = True

    stdscr.refresh()
    if key == curses.KEY_UP:
        throttle = throttle + 0.1 #0.1
        dirty = True
    elif key == curses.KEY_DOWN:
        throttle = throttle - 0.1
        dirty = True
    elif key == ord('w'):
        rotation[1] = rotation[1] + 0.05
        dirty = True
    elif key == ord('s'):
        rotation[1] = rotation[1] - 0.05
        dirty = True
    elif key == ord('d'):
        rotation[0] = rotation[0] + 0.05
        dirty = True
    elif key == ord('a'):
        rotation[0] = rotation[0] - 0.05
        dirty = True
    elif key == ord('q'):
        rotation[2] = rotation[2] + 0.05
        dirty = True
    elif key == ord('e'):
        rotation[2] = rotation[2] - 0.05
        dirty = True

    for i in range(0, len(rotation)):
        rotation[i] = round(rotation[i], 4)
    throttle = round(throttle, 4)


    twist = TwistStamped()
    twist.twist.linear = Vector3(x=rotation[0], y=rotation[1], z=throttle)
    twist.twist.angular = Vector3(z=rotation[2])

    stdscr.addstr(2, 10, "vz: " + str(throttle) + "   ")
    stdscr.addstr(3, 10, "vx:  " + str(rotation[0]) + "   ")
    stdscr.addstr(4, 10, "vy: " + str(rotation[1]) + "   ")
    stdscr.addstr(5, 10, "vyaw:   " + str(rotation[2]) + "   ")

    if dirty:
        vel_pub.publish(twist)
        dirty = False

curses.endwin()
#+end_src


~~catkin_ws/src/drone_control/src/offb_teleop.cpp~ 추가
#+begin_src
/**
 * @file offb_teleop.cpp
 * @brief Offboard control example node, written with MAVROS version 0.19.x, PX4 Pro Flight
 * Stack and tested in Gazebo SITL
 */

#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/TwistStamped.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>

mavros_msgs::State current_state;
geometry_msgs::TwistStamped cmd_vel;

void state_cb(const mavros_msgs::State::ConstPtr& msg){
    current_state = *msg;
}

void cmd_vel_cb(const geometry_msgs::TwistStamped::ConstPtr& msg){
    cmd_vel = *msg;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "offb_teleop");
    ros::NodeHandle nh;

    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
            ("mavros/state", 10, state_cb);

    ros::Subscriber cmd_vel_sub = nh.subscribe<geometry_msgs::TwistStamped>
            ("drone_control/cmd_vel", 10, cmd_vel_cb);

    ros::Publisher local_vel_pub = nh.advertise<geometry_msgs::TwistStamped>
            ("mavros/setpoint_velocity/cmd_vel", 10);

    ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>
            ("mavros/setpoint_position/local", 10);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
            ("mavros/cmd/arming");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
            ("mavros/set_mode");

    //the setpoint publishing rate MUST be faster than 2Hz
    ros::Rate rate(20.0);

    // wait for FCU connection
    while(ros::ok() && !current_state.connected){
        ros::spinOnce();
        rate.sleep();
    }

    geometry_msgs::PoseStamped pose;
    pose.pose.position.x = 0;
    pose.pose.position.y = 0;
    pose.pose.position.z = 2;

    //send a few setpoints before starting
    for(int i = 100; ros::ok() && i > 0; --i){
        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    mavros_msgs::SetMode offb_set_mode;
    offb_set_mode.request.custom_mode = "OFFBOARD";

    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    ros::Time last_request = ros::Time::now();

    while(ros::ok()){
        if( current_state.mode != "OFFBOARD" &&
            (ros::Time::now() - last_request > ros::Duration(5.0))){
            if( set_mode_client.call(offb_set_mode) &&
                offb_set_mode.response.mode_sent){
                ROS_INFO("Offboard enabled");
            }
            last_request = ros::Time::now();
        } else {
            if( !current_state.armed &&
                (ros::Time::now() - last_request > ros::Duration(5.0))){
                if( arming_client.call(arm_cmd) &&
                    arm_cmd.response.success){
                    ROS_INFO("Vehicle armed");
                }
                last_request = ros::Time::now();
            }
        }

        //local_pos_pub.publish(pose);
        local_vel_pub.publish(cmd_vel);

        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}
#+end_src



파이썬 스크립트 실행 권한 추가

#+begin_src py
$ cd ~/catkin_ws/src/drone_control/scripts
$ chmod +x mavteleop_key.py
#+end_src

환경 변수 다시 로드!
#+begin_src sh
$ source ~/catkin_ws/devel/setup.bash
#+end_src

*** 패키지 빌드

#+begin_src sh
$ cd ~/catkin_ws
$ catkin build
#+end_src

*** 패키지 노드 실행

~drone_control~ 패키지의 ~mavteleop_key~ 노드 실행
#+begin_src sh
$ rosrun drone_control mavteleop_key.py
#+end_src

~drone_control~ 패키지의 ~offb_teleop~ 노드 실행
#+begin_src sh
$ rosrun drone_control offb_teleop
#+end_src

** joystic 사용하여 setpoint 보내기

mavros extras mavteleop

Logitech Wireless Gamepad F710 (DirectInput Mode)

~~/catkin_ws/src/mavros/mavros_extras/launch/teleop.launch~ ~teleop_args~ 수정
#+begin_src
        <!--arg name="teleop_args" default="-att" /> -->
        <arg name="teleop_args" default="-vel" />
#+end_src

~~/catkin_ws/src/mavros/mavros_extras/scripts/mavteleop~ 파일의 ~velocity_setpoint_control~ 함수 수정
#+begin_src
def velocity_setpoint_control(args):
    rospy.loginfo("MAV-Teleop: Velocity setpoint control type.")

    vel_pub = rospy.Publisher("/mavros/setpoint_velocity/cmd_vel",
                                     TwistStamped,
                                     queue_size=10)

    def joy_cb(joy):
        # MODE 2
        yaw = joy.axes[0]
        throttle = joy.axes[1]
        roll = joy.axes[2]
        pitch = joy.axes[3]

        rospy.logdebug("RPYT: %f, %f, %f, %f", roll, pitch, yaw, throttle)

        # Based on QGC UAS joystickinput_settargets branch
        # not shure that it really need inegrating, as it done in QGC.
        twist = TwistStamped(header=Header(stamp=rospy.get_rostime()))
        twist.twist.linear = Vector3(x=roll, y=pitch, z=throttle)
        twist.twist.angular = Vector3(z=yaw)

        vel_pub.publish(twist)


    jsub = rospy.Subscriber("joy", Joy, joy_cb)
    rospy.spin()

#+end_src
#+begin_src
cd ~/Firmware
roslaunch px4 mavros_posix_sitl.launch
#+end_src

#+begin_src
sudo apt-get install ros-melodic-joy
cd ~/catkin_ws
roslaunch mavros_extras teleop.launch
#+end_src

#+begin_src
rosrun mavros mavsys mode -c OFFBOARD
rosrun mavros mavsafety arm
#+end_src

참고:
 - https://github.com/nasa-jpl/osr-rover-code/blob/master/ROS/osr/src/joystick.py
